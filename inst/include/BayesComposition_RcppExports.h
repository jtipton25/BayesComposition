// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_BayesComposition_RCPPEXPORTS_H_GEN_
#define RCPP_BayesComposition_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace BayesComposition {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("BayesComposition", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("BayesComposition", "BayesComposition_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in BayesComposition");
            }
        }
    }

    inline double basis_cpp(const double& x, const int& degree, const int& i, const arma::vec& knots) {
        typedef SEXP(*Ptr_basis_cpp)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_basis_cpp p_basis_cpp = NULL;
        if (p_basis_cpp == NULL) {
            validateSignature("double(*basis_cpp)(const double&,const int&,const int&,const arma::vec&)");
            p_basis_cpp = (Ptr_basis_cpp)R_GetCCallable("BayesComposition", "BayesComposition_basis_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_basis_cpp(Rcpp::wrap(x), Rcpp::wrap(degree), Rcpp::wrap(i), Rcpp::wrap(knots));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline arma::mat bs_cpp(const arma::vec& x, const int& df, const arma::vec& interior_knots, const int& degree, const bool& intercept, const arma::vec& Boundary_knots) {
        typedef SEXP(*Ptr_bs_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bs_cpp p_bs_cpp = NULL;
        if (p_bs_cpp == NULL) {
            validateSignature("arma::mat(*bs_cpp)(const arma::vec&,const int&,const arma::vec&,const int&,const bool&,const arma::vec&)");
            p_bs_cpp = (Ptr_bs_cpp)R_GetCCallable("BayesComposition", "BayesComposition_bs_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bs_cpp(Rcpp::wrap(x), Rcpp::wrap(df), Rcpp::wrap(interior_knots), Rcpp::wrap(degree), Rcpp::wrap(intercept), Rcpp::wrap(Boundary_knots));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::vec colSums(const arma::mat& X) {
        typedef SEXP(*Ptr_colSums)(SEXP);
        static Ptr_colSums p_colSums = NULL;
        if (p_colSums == NULL) {
            validateSignature("arma::vec(*colSums)(const arma::mat&)");
            p_colSums = (Ptr_colSums)R_GetCCallable("BayesComposition", "BayesComposition_colSums");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_colSums(Rcpp::wrap(X));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline double d_half_cauchy(double& x, double& sigma, bool logd = true) {
        typedef SEXP(*Ptr_d_half_cauchy)(SEXP,SEXP,SEXP);
        static Ptr_d_half_cauchy p_d_half_cauchy = NULL;
        if (p_d_half_cauchy == NULL) {
            validateSignature("double(*d_half_cauchy)(double&,double&,bool)");
            p_d_half_cauchy = (Ptr_d_half_cauchy)R_GetCCallable("BayesComposition", "BayesComposition_d_half_cauchy");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_d_half_cauchy(Rcpp::wrap(x), Rcpp::wrap(sigma), Rcpp::wrap(logd));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double dMVN(const arma::mat& y, const arma::vec& mu, const arma::mat& Sigma_chol, const bool logd = true) {
        typedef SEXP(*Ptr_dMVN)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_dMVN p_dMVN = NULL;
        if (p_dMVN == NULL) {
            validateSignature("double(*dMVN)(const arma::mat&,const arma::vec&,const arma::mat&,const bool)");
            p_dMVN = (Ptr_dMVN)R_GetCCallable("BayesComposition", "BayesComposition_dMVN");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dMVN(Rcpp::wrap(y), Rcpp::wrap(mu), Rcpp::wrap(Sigma_chol), Rcpp::wrap(logd));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double dMVNChol(const arma::vec& y, const arma::vec& mu, const arma::mat& Sigma_chol, const bool logd = true) {
        typedef SEXP(*Ptr_dMVNChol)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_dMVNChol p_dMVNChol = NULL;
        if (p_dMVNChol == NULL) {
            validateSignature("double(*dMVNChol)(const arma::vec&,const arma::vec&,const arma::mat&,const bool)");
            p_dMVNChol = (Ptr_dMVNChol)R_GetCCallable("BayesComposition", "BayesComposition_dMVNChol");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dMVNChol(Rcpp::wrap(y), Rcpp::wrap(mu), Rcpp::wrap(Sigma_chol), Rcpp::wrap(logd));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double LL_DM(const arma::mat& alpha, const arma::mat& Y, const double& N, const double& d, const arma::vec& count) {
        typedef SEXP(*Ptr_LL_DM)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_LL_DM p_LL_DM = NULL;
        if (p_LL_DM == NULL) {
            validateSignature("double(*LL_DM)(const arma::mat&,const arma::mat&,const double&,const double&,const arma::vec&)");
            p_LL_DM = (Ptr_LL_DM)R_GetCCallable("BayesComposition", "BayesComposition_LL_DM");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_LL_DM(Rcpp::wrap(alpha), Rcpp::wrap(Y), Rcpp::wrap(N), Rcpp::wrap(d), Rcpp::wrap(count));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double LL_DM_row(const arma::rowvec& alpha, const arma::rowvec& Y, const double& d, const double& count) {
        typedef SEXP(*Ptr_LL_DM_row)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_LL_DM_row p_LL_DM_row = NULL;
        if (p_LL_DM_row == NULL) {
            validateSignature("double(*LL_DM_row)(const arma::rowvec&,const arma::rowvec&,const double&,const double&)");
            p_LL_DM_row = (Ptr_LL_DM_row)R_GetCCallable("BayesComposition", "BayesComposition_LL_DM_row");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_LL_DM_row(Rcpp::wrap(alpha), Rcpp::wrap(Y), Rcpp::wrap(d), Rcpp::wrap(count));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double logDet(const arma::mat Sig) {
        typedef SEXP(*Ptr_logDet)(SEXP);
        static Ptr_logDet p_logDet = NULL;
        if (p_logDet == NULL) {
            validateSignature("double(*logDet)(const arma::mat)");
            p_logDet = (Ptr_logDet)R_GetCCallable("BayesComposition", "BayesComposition_logDet");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_logDet(Rcpp::wrap(Sig));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double logDetChol(const arma::mat Sig_chol) {
        typedef SEXP(*Ptr_logDetChol)(SEXP);
        static Ptr_logDetChol p_logDetChol = NULL;
        if (p_logDetChol == NULL) {
            validateSignature("double(*logDetChol)(const arma::mat)");
            p_logDetChol = (Ptr_logDetChol)R_GetCCallable("BayesComposition", "BayesComposition_logDetChol");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_logDetChol(Rcpp::wrap(Sig_chol));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline arma::vec logit(const arma::vec& phi) {
        typedef SEXP(*Ptr_logit)(SEXP);
        static Ptr_logit p_logit = NULL;
        if (p_logit == NULL) {
            validateSignature("arma::vec(*logit)(const arma::vec&)");
            p_logit = (Ptr_logit)R_GetCCallable("BayesComposition", "BayesComposition_logit");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_logit(Rcpp::wrap(phi));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::vec expit(const arma::vec& phi) {
        typedef SEXP(*Ptr_expit)(SEXP);
        static Ptr_expit p_expit = NULL;
        if (p_expit == NULL) {
            validateSignature("arma::vec(*expit)(const arma::vec&)");
            p_expit = (Ptr_expit)R_GetCCallable("BayesComposition", "BayesComposition_expit");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_expit(Rcpp::wrap(phi));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::mat makeUpperLKJ(const arma::vec& x, const int& d) {
        typedef SEXP(*Ptr_makeUpperLKJ)(SEXP,SEXP);
        static Ptr_makeUpperLKJ p_makeUpperLKJ = NULL;
        if (p_makeUpperLKJ == NULL) {
            validateSignature("arma::mat(*makeUpperLKJ)(const arma::vec&,const int&)");
            p_makeUpperLKJ = (Ptr_makeUpperLKJ)R_GetCCallable("BayesComposition", "BayesComposition_makeUpperLKJ");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_makeUpperLKJ(Rcpp::wrap(x), Rcpp::wrap(d));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline Rcpp::List makeRLKJ(const arma::vec& xi, const int& d, bool cholesky = false, bool jacobian = false) {
        typedef SEXP(*Ptr_makeRLKJ)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_makeRLKJ p_makeRLKJ = NULL;
        if (p_makeRLKJ == NULL) {
            validateSignature("Rcpp::List(*makeRLKJ)(const arma::vec&,const int&,bool,bool)");
            p_makeRLKJ = (Ptr_makeRLKJ)R_GetCCallable("BayesComposition", "BayesComposition_makeRLKJ");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_makeRLKJ(Rcpp::wrap(xi), Rcpp::wrap(d), Rcpp::wrap(cholesky), Rcpp::wrap(jacobian));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline arma::mat makeDistARMA(const arma::mat& coords1, const arma::mat& coords2) {
        typedef SEXP(*Ptr_makeDistARMA)(SEXP,SEXP);
        static Ptr_makeDistARMA p_makeDistARMA = NULL;
        if (p_makeDistARMA == NULL) {
            validateSignature("arma::mat(*makeDistARMA)(const arma::mat&,const arma::mat&)");
            p_makeDistARMA = (Ptr_makeDistARMA)R_GetCCallable("BayesComposition", "BayesComposition_makeDistARMA");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_makeDistARMA(Rcpp::wrap(coords1), Rcpp::wrap(coords2));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat makeQinv(const double& theta, const int& t) {
        typedef SEXP(*Ptr_makeQinv)(SEXP,SEXP);
        static Ptr_makeQinv p_makeQinv = NULL;
        if (p_makeQinv == NULL) {
            validateSignature("arma::mat(*makeQinv)(const double&,const int&)");
            p_makeQinv = (Ptr_makeQinv)R_GetCCallable("BayesComposition", "BayesComposition_makeQinv");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_makeQinv(Rcpp::wrap(theta), Rcpp::wrap(t));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat mvrnormArma(const int& n, const arma::vec& mu, const arma::mat& Sigma) {
        typedef SEXP(*Ptr_mvrnormArma)(SEXP,SEXP,SEXP);
        static Ptr_mvrnormArma p_mvrnormArma = NULL;
        if (p_mvrnormArma == NULL) {
            validateSignature("arma::mat(*mvrnormArma)(const int&,const arma::vec&,const arma::mat&)");
            p_mvrnormArma = (Ptr_mvrnormArma)R_GetCCallable("BayesComposition", "BayesComposition_mvrnormArma");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_mvrnormArma(Rcpp::wrap(n), Rcpp::wrap(mu), Rcpp::wrap(Sigma));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::vec mvrnormArmaVec(const arma::vec& mu, const arma::mat& Sigma) {
        typedef SEXP(*Ptr_mvrnormArmaVec)(SEXP,SEXP);
        static Ptr_mvrnormArmaVec p_mvrnormArmaVec = NULL;
        if (p_mvrnormArmaVec == NULL) {
            validateSignature("arma::vec(*mvrnormArmaVec)(const arma::vec&,const arma::mat&)");
            p_mvrnormArmaVec = (Ptr_mvrnormArmaVec)R_GetCCallable("BayesComposition", "BayesComposition_mvrnormArmaVec");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_mvrnormArmaVec(Rcpp::wrap(mu), Rcpp::wrap(Sigma));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::mat mvrnormArmaChol(const int& n, const arma::vec& mu, const arma::mat& Sigma_chol) {
        typedef SEXP(*Ptr_mvrnormArmaChol)(SEXP,SEXP,SEXP);
        static Ptr_mvrnormArmaChol p_mvrnormArmaChol = NULL;
        if (p_mvrnormArmaChol == NULL) {
            validateSignature("arma::mat(*mvrnormArmaChol)(const int&,const arma::vec&,const arma::mat&)");
            p_mvrnormArmaChol = (Ptr_mvrnormArmaChol)R_GetCCallable("BayesComposition", "BayesComposition_mvrnormArmaChol");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_mvrnormArmaChol(Rcpp::wrap(n), Rcpp::wrap(mu), Rcpp::wrap(Sigma_chol));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::vec mvrnormArmaVecChol(const arma::vec& mu, const arma::mat& Sigma_chol) {
        typedef SEXP(*Ptr_mvrnormArmaVecChol)(SEXP,SEXP);
        static Ptr_mvrnormArmaVecChol p_mvrnormArmaVecChol = NULL;
        if (p_mvrnormArmaVecChol == NULL) {
            validateSignature("arma::vec(*mvrnormArmaVecChol)(const arma::vec&,const arma::mat&)");
            p_mvrnormArmaVecChol = (Ptr_mvrnormArmaVecChol)R_GetCCallable("BayesComposition", "BayesComposition_mvrnormArmaVecChol");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_mvrnormArmaVecChol(Rcpp::wrap(mu), Rcpp::wrap(Sigma_chol));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::vec rMVNArma(arma::mat& A, arma::vec& b) {
        typedef SEXP(*Ptr_rMVNArma)(SEXP,SEXP);
        static Ptr_rMVNArma p_rMVNArma = NULL;
        if (p_rMVNArma == NULL) {
            validateSignature("arma::vec(*rMVNArma)(arma::mat&,arma::vec&)");
            p_rMVNArma = (Ptr_rMVNArma)R_GetCCallable("BayesComposition", "BayesComposition_rMVNArma");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rMVNArma(Rcpp::wrap(A), Rcpp::wrap(b));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline double rMVNArmaScalar(const double& a, const double& b) {
        typedef SEXP(*Ptr_rMVNArmaScalar)(SEXP,SEXP);
        static Ptr_rMVNArmaScalar p_rMVNArmaScalar = NULL;
        if (p_rMVNArmaScalar == NULL) {
            validateSignature("double(*rMVNArmaScalar)(const double&,const double&)");
            p_rMVNArmaScalar = (Ptr_rMVNArmaScalar)R_GetCCallable("BayesComposition", "BayesComposition_rMVNArmaScalar");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rMVNArmaScalar(Rcpp::wrap(a), Rcpp::wrap(b));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline arma::vec seq_lenC(const int& n) {
        typedef SEXP(*Ptr_seq_lenC)(SEXP);
        static Ptr_seq_lenC p_seq_lenC = NULL;
        if (p_seq_lenC == NULL) {
            validateSignature("arma::vec(*seq_lenC)(const int&)");
            p_seq_lenC = (Ptr_seq_lenC)R_GetCCallable("BayesComposition", "BayesComposition_seq_lenC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_seq_lenC(Rcpp::wrap(n));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline void updateTuning(const int k, double& accept_tmp, double& tune) {
        typedef SEXP(*Ptr_updateTuning)(SEXP,SEXP,SEXP);
        static Ptr_updateTuning p_updateTuning = NULL;
        if (p_updateTuning == NULL) {
            validateSignature("void(*updateTuning)(const int,double&,double&)");
            p_updateTuning = (Ptr_updateTuning)R_GetCCallable("BayesComposition", "BayesComposition_updateTuning");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_updateTuning(Rcpp::wrap(k), Rcpp::wrap(accept_tmp), Rcpp::wrap(tune));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

    inline void updateTuningVec(const int k, arma::vec& accept_tmp, arma::vec& tune) {
        typedef SEXP(*Ptr_updateTuningVec)(SEXP,SEXP,SEXP);
        static Ptr_updateTuningVec p_updateTuningVec = NULL;
        if (p_updateTuningVec == NULL) {
            validateSignature("void(*updateTuningVec)(const int,arma::vec&,arma::vec&)");
            p_updateTuningVec = (Ptr_updateTuningVec)R_GetCCallable("BayesComposition", "BayesComposition_updateTuningVec");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_updateTuningVec(Rcpp::wrap(k), Rcpp::wrap(accept_tmp), Rcpp::wrap(tune));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

    inline void updateTuningMat(const int k, arma::mat& accept_tmp, arma::mat& tune) {
        typedef SEXP(*Ptr_updateTuningMat)(SEXP,SEXP,SEXP);
        static Ptr_updateTuningMat p_updateTuningMat = NULL;
        if (p_updateTuningMat == NULL) {
            validateSignature("void(*updateTuningMat)(const int,arma::mat&,arma::mat&)");
            p_updateTuningMat = (Ptr_updateTuningMat)R_GetCCallable("BayesComposition", "BayesComposition_updateTuningMat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_updateTuningMat(Rcpp::wrap(k), Rcpp::wrap(accept_tmp), Rcpp::wrap(tune));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

    inline void updateTuningMV(const int& k, double& accept_rate, double& lambda, arma::mat& batch_samples, arma::mat& Sigma_tune, arma::mat Sigma_tune_chol) {
        typedef SEXP(*Ptr_updateTuningMV)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_updateTuningMV p_updateTuningMV = NULL;
        if (p_updateTuningMV == NULL) {
            validateSignature("void(*updateTuningMV)(const int&,double&,double&,arma::mat&,arma::mat&,arma::mat)");
            p_updateTuningMV = (Ptr_updateTuningMV)R_GetCCallable("BayesComposition", "BayesComposition_updateTuningMV");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_updateTuningMV(Rcpp::wrap(k), Rcpp::wrap(accept_rate), Rcpp::wrap(lambda), Rcpp::wrap(batch_samples), Rcpp::wrap(Sigma_tune), Rcpp::wrap(Sigma_tune_chol));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

    inline void updateTuningMVMat(const int& k, arma::vec& accept_rate, arma::vec& lambda, arma::cube& batch_samples, arma::cube& Sigma_tune, arma::cube Sigma_tune_chol) {
        typedef SEXP(*Ptr_updateTuningMVMat)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_updateTuningMVMat p_updateTuningMVMat = NULL;
        if (p_updateTuningMVMat == NULL) {
            validateSignature("void(*updateTuningMVMat)(const int&,arma::vec&,arma::vec&,arma::cube&,arma::cube&,arma::cube)");
            p_updateTuningMVMat = (Ptr_updateTuningMVMat)R_GetCCallable("BayesComposition", "BayesComposition_updateTuningMVMat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_updateTuningMVMat(Rcpp::wrap(k), Rcpp::wrap(accept_rate), Rcpp::wrap(lambda), Rcpp::wrap(batch_samples), Rcpp::wrap(Sigma_tune), Rcpp::wrap(Sigma_tune_chol));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

}

#endif // RCPP_BayesComposition_RCPPEXPORTS_H_GEN_
